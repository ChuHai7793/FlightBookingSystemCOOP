package com.example.flightbookingmanagement.service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class PaymentReturnService {
    private static final String VNP_HASH_SECRET = "X55GLPDDIK85CA2IQ8Z29KJ70A1EDHHA"; // Thay b·∫±ng secret key th·ª±c t·∫ø

    /**
     * X√°c minh ch·ªØ k√Ω t·ª´ VNPAY
     */
    public boolean verifyPayment(Map<String, String> fields) {
        // Nh·∫≠n ch·ªØ k√Ω t·ª´ request
        String vnpSecureHash = fields.get("vnp_SecureHash");

        // Debug to√†n b·ªô d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ VNPAY
        System.out.println("=== D·ªÆ LI·ªÜU NH·∫¨N T·ª™ VNPAY ===");
        fields.forEach((k, v) -> System.out.println(k + " = " + v));
        System.out.println("============================");

        // T·∫°o SecureHash t·ª´ d·ªØ li·ªáu
        String generatedSecureHash = generateHash(fields);

        // Debug k·∫øt qu·∫£
        System.out.println("üîπ Received vnp_SecureHash: " + vnpSecureHash);
        System.out.println("üîπ Generated SecureHash: " + generatedSecureHash);
        System.out.println("üîπ Comparison result: " + generatedSecureHash.equalsIgnoreCase(vnpSecureHash));

        // So s√°nh hai hash
        return generatedSecureHash.equalsIgnoreCase(vnpSecureHash);
    }

    /**
     * T·∫°o SecureHash t·ª´ danh s√°ch tham s·ªë
     */
    public String generateHash(Map<String, String> fields) {
        // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
        Map<String, String> clonedFields = new HashMap<>(fields);

        // Lo·∫°i b·ªè vnp_SecureHash tr∆∞·ªõc khi hash
        clonedFields.remove("vnp_SecureHash");

        // Gi·∫£i m√£ OrderInfo n·∫øu c·∫ßn
        String orderInfo = clonedFields.get("vnp_OrderInfo");
        if (orderInfo != null) {
            try {
                String decodedOrderInfo = URLDecoder.decode(orderInfo, StandardCharsets.UTF_8.name());
                clonedFields.put("vnp_OrderInfo", decodedOrderInfo.trim()); // Trim ƒë·ªÉ lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

        // **S·∫Øp x·∫øp tham s·ªë theo th·ª© t·ª± Alphabet**
        List<String> fieldNames = new ArrayList<>(clonedFields.keySet());
        Collections.sort(fieldNames);

        // **T·∫°o chu·ªói d·ªØ li·ªáu ƒë·ªÉ hash**
        StringBuilder hashData = new StringBuilder();
        for (String fieldName : fieldNames) {
            hashData.append(fieldName).append('=').append(clonedFields.get(fieldName)).append('&');
        }
        hashData.deleteCharAt(hashData.length() - 1); // X√≥a d·∫•u & cu·ªëi c√πng

        // **TH√äM `VNP_HASH_SECRET` V√ÄO CU·ªêI**
        hashData.append("&").append(VNP_HASH_SECRET);

        String finalHashData = hashData.toString();

        // **T·∫°o m√£ hash**
        String secureHash = hmacSHA512(VNP_HASH_SECRET, finalHashData);

        // **Debug t·ª´ng tham s·ªë**
        System.out.println("üîπ Fields used for hash:");
        clonedFields.forEach((key, value) -> System.out.println(key + " = " + value));
        System.out.println("üîπ Final Hash Input String: " + finalHashData);
        System.out.println("üîπ Generated SecureHash: " + secureHash);

        return secureHash;
    }

    /**
     * T·∫°o m√£ HMAC SHA512
     */
    private static String hmacSHA512(String key, String data) {
        try {
            Mac mac = Mac.getInstance("HmacSHA512");
            SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "HmacSHA512");
            mac.init(secretKey);
            byte[] hash = mac.doFinal(data.getBytes(StandardCharsets.UTF_8));
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                hexString.append(String.format("%02X", b));
            }
            return hexString.toString();
        } catch (Exception e) {
            throw new RuntimeException("Error while hashing", e);
        }
    }
}